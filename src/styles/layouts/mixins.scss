/* Mixin */
@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}


@mixin cal_height() {
  height: calc(100vh - 60px);
  min-height: 500px;
}

@mixin rotate($degree: -90deg) {
  /* Safari */
-webkit-transform: rotate($degree);
transform: rotate($degree);
/* Firefox */
-moz-transform: rotate($degree);
/* IE */
-ms-transform: rotate($degree);
/* Opera */
-o-transform: rotate($degree);


}


$breakpoints: (
  small: 480px,
  medium: 768px,
  medium_alt: 662px,
  large: 1024px,
  xlarge: 1280px,
  full: 1600px,
);

@function bp-val($name) {
  @if type-of($name) == 'number' {
    @return $name;
  }

  $val: map-get($breakpoints, $name);

  @if $val == null {
    @error 'Breakpoint #{$name} not found';
  }

  @return $val;
}

@function bp-val-next($name) {
  $breakpoint-names: map_keys($breakpoints);
  $n: index($breakpoint-names, $name);

  @if $n >= length($breakpoint-names) {
    @error 'Next breakpoint after #{$name} not found';
  }

  $next-key: nth($breakpoint-names, $n + 1);
  @return map-get($breakpoints, $next-key);
}

@mixin bp($name) {
  $val: bp-val($name);

  @media (min-width: $val) {
    @content;
  }
}

@mixin bp-down($name) {
  $val: bp-val($name);

  @media (max-width: $val - 0.02) {
    @content;
  }
}

@mixin bp-only($name) {
  @if type-of($name) == 'number' {
    @error '#{$name} should be breakpoint name';
  }

  $min: bp-val($name);
  $max: bp-val-next($name);

  @media (min-width: $min) and (max-width: $max - 0.02) {
    @content;
  }
}

@mixin bp-between($name1, $name2) {
  $min: bp-val($name1);
  $max: bp-val($name2);

  @media (min-width: $min) and (max-width: $max - 0.02) {
    @content;
  }
}
